# -*- coding: utf-8 -*-
"""prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pf2xlNu6iBBlYrXvMVzt3zP0Dwe-kxth
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Sample Data
data = {
    'GPA': [3.6, 2.8, 3.9, 2.5, 3.2],
        'Test_Scores': [85, 70, 90, 65, 78],
            'Attendance': [95, 75, 98, 60, 85],
                'Age': [18, 20, 19, 21, 22],
                    'Gender': ['Male', 'Female', 'Female', 'Male', 'Female'],
                        'Socioeconomic_Status': ['Medium', 'Low', 'High', 'Low', 'Medium'],
                            'Previous_Enrollments': [2, 1, 3, 0, 1],
                                'Completed_Previous': [1, 0, 1, 0, 0],
                                    'Enrolled': [1, 0, 1, 0, 1]
                                    }

 # Create DataFrame
df = pd.DataFrame(data)

# Encode categorical variables
df['Gender'] = df['Gender'].map({'Male': 0, 'Female': 1})
df['Socioeconomic_Status'] = df['Socioeconomic_Status'].map({'Low': 0, 'Medium': 1, 'High': 2})
df['Completed_Previous'] = df['Completed_Previous'].astype(int)

# Define features and target
X = df.drop('Enrolled', axis=1)
y = df['Enrolled']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Random Forest model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluation
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Not Enrolled', 'Enrolled'], yticklabels=['Not Enrolled', 'Enrolled'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importance
importances = model.feature_importances_
feature_names = X.columns
importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})
importance_df = importance_df.sort_values('Importance', ascending=False)

# Plot feature importance
sns.barplot(x='Importance', y='Feature', data=importance_df)
plt.title('Feature Importance')
plt.show()